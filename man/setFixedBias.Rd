% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/AllGenerics.R, R/Methods-GbsrGenotypeData.R
\name{setFixedBias}
\alias{setFixedBias}
\alias{setFixedBias,GbsrGenotypeData-method}
\title{Set fixed allele read biases}
\usage{
setFixedBias(object, bias, ...)

\S4method{setFixedBias}{GbsrGenotypeData}(object, bias)
}
\arguments{
\item{object}{A \link{GbsrGenotypeData} object.}

\item{bias}{A numeric vector of fixed allele read biases to be assigned to
valid markers. The length of \code{bias} vector should match the number of valid
markers. The values in the \code{bias} vector are assigned to the valid markers
according to their order. NAs in the \code{bias} vector indicates non-fixed biases.}

\item{...}{Unused.}
}
\value{
A \link{GbsrGenotypeData} object after adding dominant marker information
}
\description{
Set fixed allele read biases of valid markers
}
\details{
Since the bias set by \code{\link[=setFixedBias]{setFixedBias()}} function is the reference allele read
bias. Thus, the values 0 and 1 mean that the marker only gives alternative
and reference allele reads, respectively.
Set these fixed biases if some of your markers are dominant markers.
}
\examples{
# Create a GDS file from a sample VCF file.
vcf_fn <- system.file("extdata", "sample.vcf", package = "GBScleanR")
gds_fn <- tempfile("sample", fileext = ".gds")
gbsrVCF2GDS(vcf_fn = vcf_fn, out_fn = gds_fn, force = TRUE)

# Load data in the GDS file and instantiate a [GbsrGenotypeData] object.
gds <- loadGDS(gds_fn)

# Set fixed allele rad biases.
# Initialize the bias vector to be assinged.
bias <- rep(nmar(gds), NA)

# As an example, select 20 markers randomly and assign 0 or 1 to them.
# Since the bias set by setFixedBias() function is the reference allele read
# bias. Thus, the values 0 and 1 means that the marker only gives alternative
# and reference allele reads, respectively.
# Set these fixed biases if some of your markers are dominant markers.
bias[sample(seq_along(bias), 20)] <- sample(c(0, 1), 20)

gds <- setFixedBias(gds, bias = bias)

# Close the connection to the GDS file
closeGDS(gds)

}
